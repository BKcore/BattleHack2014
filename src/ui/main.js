// Generated by CoffeeScript 1.6.3
(function() {
  var MAX_WIDTH, MIN_SWIPE_DELAY, MIN_SWIPE_DISTANCE, SWIPE_INCREMENT_X, createImage, debounce, initController, tweenTo;

  MAX_WIDTH = 3000;

  MIN_SWIPE_DELAY = 500;

  MIN_SWIPE_DISTANCE = 50;

  SWIPE_INCREMENT_X = window.innerWidth;

  $(function() {
    var h, i, images, layer, stage, tween, url, viewport, w, win, x, y, _i;
    viewport = {
      x: 0,
      y: 0
    };
    win = {
      width: window.innerWidth,
      height: window.innerHeight
    };
    stage = new Kinetic.Stage({
      container: 'main',
      width: win.width,
      height: win.height
    });
    layer = new Kinetic.Layer();
    stage.add(layer);
    images = [];
    for (i = _i = 0; _i <= 40; i = ++_i) {
      w = Math.round(Math.random() * 300 + 200);
      h = Math.round(Math.random() * 300 + 100);
      x = Math.round(Math.random() * MAX_WIDTH);
      y = Math.round(Math.random() * (win.height - h));
      url = "http://placekitten.com/" + w + "/" + h;
      createImage(layer, url, w, h, x, y, function(image) {
        layer.add(image);
        layer.draw();
        return images.push(image);
      });
    }
    tween = null;
    return initController(true, {
      onSwipeLeft: function() {
        console.log('SWIPE LEFT');
        viewport.x -= SWIPE_INCREMENT_X;
        if (tween != null) {
          tween.finish();
        }
        tween = tweenTo(layer, viewport.x, viewport.y, 600);
        return tween.play();
      },
      onSwipeRight: function() {
        console.log('SWIPE RIGHT');
        viewport.x += SWIPE_INCREMENT_X;
        if (tween != null) {
          tween.finish();
        }
        tween = tweenTo(layer, viewport.x, viewport.y, 600);
        return tween.play();
      }
    });
  });

  debounce = function(time, fn) {
    return _.debounce(fn, time);
  };

  createImage = function(layer, url, w, h, x, y, cb) {
    var img;
    img = new Image();
    img.onload = function() {
      return cb(new Kinetic.Image({
        x: x,
        y: y,
        image: img,
        width: w,
        height: h
      }));
    };
    return img.src = url;
  };

  tweenTo = function(obj, x, y, duration) {
    return new Kinetic.Tween({
      node: obj,
      x: x,
      y: y,
      duration: duration / 1000,
      easing: Kinetic.Easings.StrongEaseOut
    });
  };

  initController = function(autoConnect, api) {
    var controller, onSwipe, swiper;
    controller = new Leap.Controller();
    console.log('Leap Motions start.');
    onSwipe = debounce(MIN_SWIPE_DELAY, function(data) {
      var tx;
      tx = data.translation()[0];
      console.log(tx);
      if (Math.abs(tx) > MIN_SWIPE_DISTANCE) {
        if (tx > 0) {
          return api.onSwipeLeft();
        } else {
          return api.onSwipeRight();
        }
      }
    });
    swiper = controller.gesture('swipe').update(onSwipe);
    if (autoConnect) {
      return controller.connect();
    }
  };

}).call(this);
