// Generated by CoffeeScript 1.6.3
(function() {
  var LAYER_COUNT, MAX_WIDTH, MIN_SWIPE_DELAY, MIN_SWIPE_DISTANCE, SWIPE_INCREMENT_X, asyncLoop, barrier, createImage, createText, debounce, initController, tweenLayersParallax, tweenToX;

  MAX_WIDTH = 3000;

  MIN_SWIPE_DELAY = 500;

  MIN_SWIPE_DISTANCE = 50;

  SWIPE_INCREMENT_X = window.innerWidth;

  LAYER_COUNT = 3;

  $(function() {
    var i, images, layers, stage, tweens, viewport, win, _fn, _i, _j, _ref;
    viewport = {
      x: 0,
      y: 0
    };
    win = {
      width: window.innerWidth,
      height: window.innerHeight
    };
    stage = new Kinetic.Stage({
      container: 'main',
      width: win.width,
      height: win.height
    });
    layers = [];
    images = [];
    _fn = function(i) {
      var layer, light, maybeAllDone;
      light = -(i / LAYER_COUNT);
      console.log('AAAAA', light, light * 255);
      layer = new Kinetic.Layer();
      stage.add(layer);
      layers.push({
        layer: layer,
        x: 0,
        tween: null
      });
      maybeAllDone = barrier(10, function() {
        var t, x, y, _j;
        console.log('layer', i, 'done');
        for (t = _j = 0; _j <= 10; t = ++_j) {
          x = Math.round(Math.random() * MAX_WIDTH - MAX_WIDTH / 10 * i);
          y = Math.round(Math.random() * (win.height - 100));
          createText(layer, "Lorem ipsum dolor sit ames et bla bla j'ai oubliÃ© le reste oulalaa.", 200, 100, x, y, light + 1);
        }
        layer.draw();
      });
      return asyncLoop(10, function(k, done) {
        var h, url, w, x, y;
        console.log('layer', i, 'image', k);
        w = Math.round(Math.random() * 300 + 200);
        h = Math.round(Math.random() * 300 + 100);
        x = Math.round(Math.random() * MAX_WIDTH - MAX_WIDTH / 10 * i);
        y = Math.round(Math.random() * (win.height - h));
        url = "http://placekitten.com/" + w + "/" + h;
        return createImage(layer, url, w, h, x, y, function(image) {
          layer.add(image);
          if (i > 0) {
            image.cache();
            image.filters([Kinetic.Filters.Brighten]);
            image.brightness(light);
          }
          images.push(image);
          layer.draw();
          done();
          return maybeAllDone();
        });
      });
    };
    for (i = _i = 0; 0 <= LAYER_COUNT ? _i < LAYER_COUNT : _i > LAYER_COUNT; i = 0 <= LAYER_COUNT ? ++_i : --_i) {
      _fn(i);
    }
    for (i = _j = _ref = LAYER_COUNT - 1; _ref <= 0 ? _j <= 0 : _j >= 0; i = _ref <= 0 ? ++_j : --_j) {
      layers[i].layer.moveToTop();
    }
    tweens = null;
    return initController(true, {
      onSwipeLeft: function() {
        console.log('SWIPE LEFT');
        return tweenLayersParallax(layers, -SWIPE_INCREMENT_X);
      },
      onSwipeRight: function() {
        console.log('SWIPE RIGHT');
        return tweenLayersParallax(layers, +SWIPE_INCREMENT_X);
      }
    });
  });

  debounce = function(time, fn) {
    return _.debounce(fn, time);
  };

  asyncLoop = function(count, fn) {
    var c, done;
    c = 0;
    done = function() {
      return setTimeout((function() {
        if (c > count) {
          return;
        }
        fn(c, done);
        return c++;
      }), 0);
    };
    return done();
  };

  barrier = function(count, fn) {
    var c;
    c = 0;
    return function() {
      if (c++ < count) {
        return;
      }
      return fn();
    };
  };

  createImage = function(layer, url, w, h, x, y, cb) {
    var img;
    img = new Image();
    img.crossOrigin = "Anonymous";
    img.onload = function() {
      return cb(new Kinetic.Image({
        x: x,
        y: y,
        image: img,
        width: w,
        height: h,
        shadowColor: 'black',
        shadowBlur: 30,
        shadowOpacity: 0.8
      }));
    };
    return img.src = url;
  };

  createText = function(layer, text, w, h, x, y, opacity) {
    var obj, rect;
    console.log('createText', arguments);
    rect = new Kinetic.Rect({
      x: x,
      y: y,
      width: w,
      height: h,
      fill: '#000',
      opacity: opacity - 0.3
    });
    obj = new Kinetic.Text({
      x: x,
      y: y,
      width: w,
      height: h,
      opacity: opacity,
      fill: '#fff',
      fontFamily: 'Helvetica',
      fontSize: 24,
      padding: 20,
      text: text
    });
    layer.add(rect);
    return layer.add(obj);
  };

  tweenToX = function(obj, x, duration) {
    return new Kinetic.Tween({
      node: obj,
      x: x,
      duration: duration / 1000,
      easing: Kinetic.Easings.StrongEaseOut
    });
  };

  tweenLayersParallax = function(layers, step) {
    var i, layer, _i, _len, _ref;
    for (i = _i = 0, _len = layers.length; _i < _len; i = ++_i) {
      layer = layers[i];
      layer.x += step - step / 3 * i;
      if ((_ref = layer.tween) != null) {
        _ref.finish();
      }
      layer.tween = tweenToX(layer.layer, layer.x, 600);
      layer.tween.play();
    }
  };

  initController = function(autoConnect, api) {
    var controller, onSwipe, swiper;
    controller = new Leap.Controller();
    console.log('Leap Motions start.');
    onSwipe = debounce(MIN_SWIPE_DELAY, function(data) {
      var tx;
      tx = data.translation()[0];
      console.log(tx);
      if (Math.abs(tx) > MIN_SWIPE_DISTANCE) {
        if (tx > 0) {
          return api.onSwipeLeft();
        } else {
          return api.onSwipeRight();
        }
      }
    });
    swiper = controller.gesture('swipe').update(onSwipe);
    if (autoConnect) {
      return controller.connect();
    }
  };

}).call(this);
